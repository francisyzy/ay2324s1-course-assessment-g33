name: Deploy AS5 to Amazon EKS

on:
  push:
    branches: [ "master", "cicd" ]
  pull_request:
    branches: [ "master", "cicd" ]

jobs:
  deploy:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install kubectl
      uses: azure/setup-kubectl@v2.0
      with:
        version: 'v1.24.0'
      id: install

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v1

    - name: Backend, Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: public.ecr.aws/a6n0p1z7
        ECR_REPOSITORY: as5
        IMAGE_TAG: latest-backend # ${{ github.sha }}
      run: |
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
        cd assignments/assignment_5/backend/
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Frontend, Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: public.ecr.aws/a6n0p1z7
        ECR_REPOSITORY: as5
        IMAGE_TAG: latest-frontend # ${{ github.sha }}
      run: |
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
        cd assignments/assignment_5/frontend/
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Create ConfigMap from Secret
      run: |
        echo "$AS5_SECRET" > k8/as5-secret.yaml
      env:
        AS5_SECRET: ${{ secrets.AS5_SECRET }}

    - name: Update kube config
      run: aws eks update-kubeconfig --name as5

    - name: Deploy to EKS
      run: |
        kubectl apply -f k8/as5/as5-config.yaml
        kubectl apply -f k8/as5/as5-secret.yaml
        kubectl apply -f k8/as5/as5-matching-backend.yaml
        kubectl apply -f k8/as5/as5-socket-backend.yaml
        kubectl apply -f k8/as5/as5-frontend.yaml
